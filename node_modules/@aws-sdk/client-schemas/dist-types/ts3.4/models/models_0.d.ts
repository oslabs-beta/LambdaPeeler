import {
  ExceptionOptionType as __ExceptionOptionType,
  LazyJsonString as __LazyJsonString,
} from "@smithy/smithy-client";
import { SchemasServiceException as __BaseException } from "./SchemasServiceException";
export declare const DiscovererState: {
  readonly STARTED: "STARTED";
  readonly STOPPED: "STOPPED";
};
export type DiscovererState =
  (typeof DiscovererState)[keyof typeof DiscovererState];
export interface DiscovererSummary {
  DiscovererArn?: string;
  DiscovererId?: string;
  SourceArn?: string;
  State?: DiscovererState | string;
  CrossAccount?: boolean;
  Tags?: Record<string, string>;
}
export interface RegistrySummary {
  RegistryArn?: string;
  RegistryName?: string;
  Tags?: Record<string, string>;
}
export interface SchemaSummary {
  LastModified?: Date;
  SchemaArn?: string;
  SchemaName?: string;
  Tags?: Record<string, string>;
  VersionCount?: number;
}
export declare const Type: {
  readonly JSONSchemaDraft4: "JSONSchemaDraft4";
  readonly OpenApi3: "OpenApi3";
};
export type Type = (typeof Type)[keyof typeof Type];
export interface SchemaVersionSummary {
  SchemaArn?: string;
  SchemaName?: string;
  SchemaVersion?: string;
  Type?: Type | string;
}
export interface SearchSchemaVersionSummary {
  CreatedDate?: Date;
  SchemaVersion?: string;
  Type?: Type | string;
}
export interface SearchSchemaSummary {
  RegistryName?: string;
  SchemaArn?: string;
  SchemaName?: string;
  SchemaVersions?: SearchSchemaVersionSummary[];
}
export declare class BadRequestException extends __BaseException {
  readonly name: "BadRequestException";
  readonly $fault: "client";
  Code: string | undefined;
  Message: string | undefined;
  constructor(
    opts: __ExceptionOptionType<BadRequestException, __BaseException>
  );
}
export declare const CodeGenerationStatus: {
  readonly CREATE_COMPLETE: "CREATE_COMPLETE";
  readonly CREATE_FAILED: "CREATE_FAILED";
  readonly CREATE_IN_PROGRESS: "CREATE_IN_PROGRESS";
};
export type CodeGenerationStatus =
  (typeof CodeGenerationStatus)[keyof typeof CodeGenerationStatus];
export declare class ConflictException extends __BaseException {
  readonly name: "ConflictException";
  readonly $fault: "client";
  Code: string | undefined;
  Message: string | undefined;
  constructor(opts: __ExceptionOptionType<ConflictException, __BaseException>);
}
export interface CreateDiscovererRequest {
  Description?: string;
  SourceArn: string | undefined;
  CrossAccount?: boolean;
  Tags?: Record<string, string>;
}
export interface CreateDiscovererResponse {
  Description?: string;
  DiscovererArn?: string;
  DiscovererId?: string;
  SourceArn?: string;
  State?: DiscovererState | string;
  CrossAccount?: boolean;
  Tags?: Record<string, string>;
}
export declare class ForbiddenException extends __BaseException {
  readonly name: "ForbiddenException";
  readonly $fault: "client";
  Code: string | undefined;
  Message: string | undefined;
  constructor(opts: __ExceptionOptionType<ForbiddenException, __BaseException>);
}
export declare class InternalServerErrorException extends __BaseException {
  readonly name: "InternalServerErrorException";
  readonly $fault: "server";
  Code: string | undefined;
  Message: string | undefined;
  constructor(
    opts: __ExceptionOptionType<InternalServerErrorException, __BaseException>
  );
}
export declare class ServiceUnavailableException extends __BaseException {
  readonly name: "ServiceUnavailableException";
  readonly $fault: "server";
  Code: string | undefined;
  Message: string | undefined;
  constructor(
    opts: __ExceptionOptionType<ServiceUnavailableException, __BaseException>
  );
}
export declare class UnauthorizedException extends __BaseException {
  readonly name: "UnauthorizedException";
  readonly $fault: "client";
  Code: string | undefined;
  Message: string | undefined;
  constructor(
    opts: __ExceptionOptionType<UnauthorizedException, __BaseException>
  );
}
export interface CreateRegistryRequest {
  Description?: string;
  RegistryName: string | undefined;
  Tags?: Record<string, string>;
}
export interface CreateRegistryResponse {
  Description?: string;
  RegistryArn?: string;
  RegistryName?: string;
  Tags?: Record<string, string>;
}
export interface CreateSchemaRequest {
  Content: string | undefined;
  Description?: string;
  RegistryName: string | undefined;
  SchemaName: string | undefined;
  Tags?: Record<string, string>;
  Type: Type | string | undefined;
}
export interface CreateSchemaResponse {
  Description?: string;
  LastModified?: Date;
  SchemaArn?: string;
  SchemaName?: string;
  SchemaVersion?: string;
  Tags?: Record<string, string>;
  Type?: string;
  VersionCreatedDate?: Date;
}
export interface DeleteDiscovererRequest {
  DiscovererId: string | undefined;
}
export declare class NotFoundException extends __BaseException {
  readonly name: "NotFoundException";
  readonly $fault: "client";
  Code: string | undefined;
  Message: string | undefined;
  constructor(opts: __ExceptionOptionType<NotFoundException, __BaseException>);
}
export interface DeleteRegistryRequest {
  RegistryName: string | undefined;
}
export interface DeleteResourcePolicyRequest {
  RegistryName?: string;
}
export interface DeleteSchemaRequest {
  RegistryName: string | undefined;
  SchemaName: string | undefined;
}
export interface DeleteSchemaVersionRequest {
  RegistryName: string | undefined;
  SchemaName: string | undefined;
  SchemaVersion: string | undefined;
}
export interface DescribeCodeBindingRequest {
  Language: string | undefined;
  RegistryName: string | undefined;
  SchemaName: string | undefined;
  SchemaVersion?: string;
}
export interface DescribeCodeBindingResponse {
  CreationDate?: Date;
  LastModified?: Date;
  SchemaVersion?: string;
  Status?: CodeGenerationStatus | string;
}
export declare class TooManyRequestsException extends __BaseException {
  readonly name: "TooManyRequestsException";
  readonly $fault: "client";
  Code: string | undefined;
  Message: string | undefined;
  constructor(
    opts: __ExceptionOptionType<TooManyRequestsException, __BaseException>
  );
}
export interface DescribeDiscovererRequest {
  DiscovererId: string | undefined;
}
export interface DescribeDiscovererResponse {
  Description?: string;
  DiscovererArn?: string;
  DiscovererId?: string;
  SourceArn?: string;
  State?: DiscovererState | string;
  CrossAccount?: boolean;
  Tags?: Record<string, string>;
}
export interface DescribeRegistryRequest {
  RegistryName: string | undefined;
}
export interface DescribeRegistryResponse {
  Description?: string;
  RegistryArn?: string;
  RegistryName?: string;
  Tags?: Record<string, string>;
}
export interface DescribeSchemaRequest {
  RegistryName: string | undefined;
  SchemaName: string | undefined;
  SchemaVersion?: string;
}
export interface DescribeSchemaResponse {
  Content?: string;
  Description?: string;
  LastModified?: Date;
  SchemaArn?: string;
  SchemaName?: string;
  SchemaVersion?: string;
  Tags?: Record<string, string>;
  Type?: string;
  VersionCreatedDate?: Date;
}
export interface ExportSchemaRequest {
  RegistryName: string | undefined;
  SchemaName: string | undefined;
  SchemaVersion?: string;
  Type: string | undefined;
}
export interface ExportSchemaResponse {
  Content?: string;
  SchemaArn?: string;
  SchemaName?: string;
  SchemaVersion?: string;
  Type?: string;
}
export interface GetCodeBindingSourceRequest {
  Language: string | undefined;
  RegistryName: string | undefined;
  SchemaName: string | undefined;
  SchemaVersion?: string;
}
export interface GetCodeBindingSourceResponse {
  Body?: Uint8Array;
}
export interface GetDiscoveredSchemaRequest {
  Events: string[] | undefined;
  Type: Type | string | undefined;
}
export interface GetDiscoveredSchemaResponse {
  Content?: string;
}
export interface GetResourcePolicyRequest {
  RegistryName?: string;
}
export interface GetResourcePolicyResponse {
  Policy?: __LazyJsonString | string;
  RevisionId?: string;
}
export declare class GoneException extends __BaseException {
  readonly name: "GoneException";
  readonly $fault: "client";
  Code: string | undefined;
  Message: string | undefined;
  constructor(opts: __ExceptionOptionType<GoneException, __BaseException>);
}
export interface ListDiscoverersRequest {
  DiscovererIdPrefix?: string;
  Limit?: number;
  NextToken?: string;
  SourceArnPrefix?: string;
}
export interface ListDiscoverersResponse {
  Discoverers?: DiscovererSummary[];
  NextToken?: string;
}
export interface ListRegistriesRequest {
  Limit?: number;
  NextToken?: string;
  RegistryNamePrefix?: string;
  Scope?: string;
}
export interface ListRegistriesResponse {
  NextToken?: string;
  Registries?: RegistrySummary[];
}
export interface ListSchemasRequest {
  Limit?: number;
  NextToken?: string;
  RegistryName: string | undefined;
  SchemaNamePrefix?: string;
}
export interface ListSchemasResponse {
  NextToken?: string;
  Schemas?: SchemaSummary[];
}
export interface ListSchemaVersionsRequest {
  Limit?: number;
  NextToken?: string;
  RegistryName: string | undefined;
  SchemaName: string | undefined;
}
export interface ListSchemaVersionsResponse {
  NextToken?: string;
  SchemaVersions?: SchemaVersionSummary[];
}
export interface ListTagsForResourceRequest {
  ResourceArn: string | undefined;
}
export interface ListTagsForResourceResponse {
  Tags?: Record<string, string>;
}
export declare class PreconditionFailedException extends __BaseException {
  readonly name: "PreconditionFailedException";
  readonly $fault: "client";
  Code: string | undefined;
  Message: string | undefined;
  constructor(
    opts: __ExceptionOptionType<PreconditionFailedException, __BaseException>
  );
}
export interface PutCodeBindingRequest {
  Language: string | undefined;
  RegistryName: string | undefined;
  SchemaName: string | undefined;
  SchemaVersion?: string;
}
export interface PutCodeBindingResponse {
  CreationDate?: Date;
  LastModified?: Date;
  SchemaVersion?: string;
  Status?: CodeGenerationStatus | string;
}
export interface PutResourcePolicyRequest {
  Policy: __LazyJsonString | string | undefined;
  RegistryName?: string;
  RevisionId?: string;
}
export interface PutResourcePolicyResponse {
  Policy?: __LazyJsonString | string;
  RevisionId?: string;
}
export interface SearchSchemasRequest {
  Keywords: string | undefined;
  Limit?: number;
  NextToken?: string;
  RegistryName: string | undefined;
}
export interface SearchSchemasResponse {
  NextToken?: string;
  Schemas?: SearchSchemaSummary[];
}
export interface StartDiscovererRequest {
  DiscovererId: string | undefined;
}
export interface StartDiscovererResponse {
  DiscovererId?: string;
  State?: DiscovererState | string;
}
export interface StopDiscovererRequest {
  DiscovererId: string | undefined;
}
export interface StopDiscovererResponse {
  DiscovererId?: string;
  State?: DiscovererState | string;
}
export interface TagResourceRequest {
  ResourceArn: string | undefined;
  Tags: Record<string, string> | undefined;
}
export interface UntagResourceRequest {
  ResourceArn: string | undefined;
  TagKeys: string[] | undefined;
}
export interface UpdateDiscovererRequest {
  Description?: string;
  DiscovererId: string | undefined;
  CrossAccount?: boolean;
}
export interface UpdateDiscovererResponse {
  Description?: string;
  DiscovererArn?: string;
  DiscovererId?: string;
  SourceArn?: string;
  State?: DiscovererState | string;
  CrossAccount?: boolean;
  Tags?: Record<string, string>;
}
export interface UpdateRegistryRequest {
  Description?: string;
  RegistryName: string | undefined;
}
export interface UpdateRegistryResponse {
  Description?: string;
  RegistryArn?: string;
  RegistryName?: string;
  Tags?: Record<string, string>;
}
export interface UpdateSchemaRequest {
  ClientTokenId?: string;
  Content?: string;
  Description?: string;
  RegistryName: string | undefined;
  SchemaName: string | undefined;
  Type?: Type | string;
}
export interface UpdateSchemaResponse {
  Description?: string;
  LastModified?: Date;
  SchemaArn?: string;
  SchemaName?: string;
  SchemaVersion?: string;
  Tags?: Record<string, string>;
  Type?: string;
  VersionCreatedDate?: Date;
}
