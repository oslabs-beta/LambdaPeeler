import { EndpointParameterInstructions } from "@smithy/middleware-endpoint";
import { Command as $Command } from "@smithy/smithy-client";
import {
  Handler,
  HttpHandlerOptions as __HttpHandlerOptions,
  MetadataBearer as __MetadataBearer,
  MiddlewareStack,
} from "@smithy/types";
import {
  DescribeSchemaRequest,
  DescribeSchemaResponse,
} from "../models/models_0";
import {
  SchemasClientResolvedConfig,
  ServiceInputTypes,
  ServiceOutputTypes,
} from "../SchemasClient";
export { __MetadataBearer, $Command };
export interface DescribeSchemaCommandInput extends DescribeSchemaRequest {}
export interface DescribeSchemaCommandOutput
  extends DescribeSchemaResponse,
    __MetadataBearer {}
export declare class DescribeSchemaCommand extends $Command<
  DescribeSchemaCommandInput,
  DescribeSchemaCommandOutput,
  SchemasClientResolvedConfig
> {
  readonly input: DescribeSchemaCommandInput;
  static getEndpointParameterInstructions(): EndpointParameterInstructions;
  constructor(input: DescribeSchemaCommandInput);
  resolveMiddleware(
    clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>,
    configuration: SchemasClientResolvedConfig,
    options?: __HttpHandlerOptions
  ): Handler<DescribeSchemaCommandInput, DescribeSchemaCommandOutput>;
  private serialize;
  private deserialize;
}
