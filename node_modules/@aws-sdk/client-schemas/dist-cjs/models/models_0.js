"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PreconditionFailedException = exports.GoneException = exports.TooManyRequestsException = exports.NotFoundException = exports.UnauthorizedException = exports.ServiceUnavailableException = exports.InternalServerErrorException = exports.ForbiddenException = exports.ConflictException = exports.CodeGenerationStatus = exports.BadRequestException = exports.Type = exports.DiscovererState = void 0;
const SchemasServiceException_1 = require("./SchemasServiceException");
exports.DiscovererState = {
    STARTED: "STARTED",
    STOPPED: "STOPPED",
};
exports.Type = {
    JSONSchemaDraft4: "JSONSchemaDraft4",
    OpenApi3: "OpenApi3",
};
class BadRequestException extends SchemasServiceException_1.SchemasServiceException {
    constructor(opts) {
        super({
            name: "BadRequestException",
            $fault: "client",
            ...opts,
        });
        this.name = "BadRequestException";
        this.$fault = "client";
        Object.setPrototypeOf(this, BadRequestException.prototype);
        this.Code = opts.Code;
        this.Message = opts.Message;
    }
}
exports.BadRequestException = BadRequestException;
exports.CodeGenerationStatus = {
    CREATE_COMPLETE: "CREATE_COMPLETE",
    CREATE_FAILED: "CREATE_FAILED",
    CREATE_IN_PROGRESS: "CREATE_IN_PROGRESS",
};
class ConflictException extends SchemasServiceException_1.SchemasServiceException {
    constructor(opts) {
        super({
            name: "ConflictException",
            $fault: "client",
            ...opts,
        });
        this.name = "ConflictException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ConflictException.prototype);
        this.Code = opts.Code;
        this.Message = opts.Message;
    }
}
exports.ConflictException = ConflictException;
class ForbiddenException extends SchemasServiceException_1.SchemasServiceException {
    constructor(opts) {
        super({
            name: "ForbiddenException",
            $fault: "client",
            ...opts,
        });
        this.name = "ForbiddenException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ForbiddenException.prototype);
        this.Code = opts.Code;
        this.Message = opts.Message;
    }
}
exports.ForbiddenException = ForbiddenException;
class InternalServerErrorException extends SchemasServiceException_1.SchemasServiceException {
    constructor(opts) {
        super({
            name: "InternalServerErrorException",
            $fault: "server",
            ...opts,
        });
        this.name = "InternalServerErrorException";
        this.$fault = "server";
        Object.setPrototypeOf(this, InternalServerErrorException.prototype);
        this.Code = opts.Code;
        this.Message = opts.Message;
    }
}
exports.InternalServerErrorException = InternalServerErrorException;
class ServiceUnavailableException extends SchemasServiceException_1.SchemasServiceException {
    constructor(opts) {
        super({
            name: "ServiceUnavailableException",
            $fault: "server",
            ...opts,
        });
        this.name = "ServiceUnavailableException";
        this.$fault = "server";
        Object.setPrototypeOf(this, ServiceUnavailableException.prototype);
        this.Code = opts.Code;
        this.Message = opts.Message;
    }
}
exports.ServiceUnavailableException = ServiceUnavailableException;
class UnauthorizedException extends SchemasServiceException_1.SchemasServiceException {
    constructor(opts) {
        super({
            name: "UnauthorizedException",
            $fault: "client",
            ...opts,
        });
        this.name = "UnauthorizedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, UnauthorizedException.prototype);
        this.Code = opts.Code;
        this.Message = opts.Message;
    }
}
exports.UnauthorizedException = UnauthorizedException;
class NotFoundException extends SchemasServiceException_1.SchemasServiceException {
    constructor(opts) {
        super({
            name: "NotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "NotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, NotFoundException.prototype);
        this.Code = opts.Code;
        this.Message = opts.Message;
    }
}
exports.NotFoundException = NotFoundException;
class TooManyRequestsException extends SchemasServiceException_1.SchemasServiceException {
    constructor(opts) {
        super({
            name: "TooManyRequestsException",
            $fault: "client",
            ...opts,
        });
        this.name = "TooManyRequestsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TooManyRequestsException.prototype);
        this.Code = opts.Code;
        this.Message = opts.Message;
    }
}
exports.TooManyRequestsException = TooManyRequestsException;
class GoneException extends SchemasServiceException_1.SchemasServiceException {
    constructor(opts) {
        super({
            name: "GoneException",
            $fault: "client",
            ...opts,
        });
        this.name = "GoneException";
        this.$fault = "client";
        Object.setPrototypeOf(this, GoneException.prototype);
        this.Code = opts.Code;
        this.Message = opts.Message;
    }
}
exports.GoneException = GoneException;
class PreconditionFailedException extends SchemasServiceException_1.SchemasServiceException {
    constructor(opts) {
        super({
            name: "PreconditionFailedException",
            $fault: "client",
            ...opts,
        });
        this.name = "PreconditionFailedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, PreconditionFailedException.prototype);
        this.Code = opts.Code;
        this.Message = opts.Message;
    }
}
exports.PreconditionFailedException = PreconditionFailedException;
