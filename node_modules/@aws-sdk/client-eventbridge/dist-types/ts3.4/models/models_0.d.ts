import { ExceptionOptionType as __ExceptionOptionType } from "@smithy/smithy-client";
import { EventBridgeServiceException as __BaseException } from "./EventBridgeServiceException";
export interface ActivateEventSourceRequest {
  Name: string | undefined;
}
export declare class ConcurrentModificationException extends __BaseException {
  readonly name: "ConcurrentModificationException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      ConcurrentModificationException,
      __BaseException
    >
  );
}
export declare class InternalException extends __BaseException {
  readonly name: "InternalException";
  readonly $fault: "server";
  constructor(opts: __ExceptionOptionType<InternalException, __BaseException>);
}
export declare class InvalidStateException extends __BaseException {
  readonly name: "InvalidStateException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<InvalidStateException, __BaseException>
  );
}
export declare class OperationDisabledException extends __BaseException {
  readonly name: "OperationDisabledException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<OperationDisabledException, __BaseException>
  );
}
export declare class ResourceNotFoundException extends __BaseException {
  readonly name: "ResourceNotFoundException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>
  );
}
export declare const ApiDestinationState: {
  readonly ACTIVE: "ACTIVE";
  readonly INACTIVE: "INACTIVE";
};
export type ApiDestinationState =
  (typeof ApiDestinationState)[keyof typeof ApiDestinationState];
export declare const ApiDestinationHttpMethod: {
  readonly DELETE: "DELETE";
  readonly GET: "GET";
  readonly HEAD: "HEAD";
  readonly OPTIONS: "OPTIONS";
  readonly PATCH: "PATCH";
  readonly POST: "POST";
  readonly PUT: "PUT";
};
export type ApiDestinationHttpMethod =
  (typeof ApiDestinationHttpMethod)[keyof typeof ApiDestinationHttpMethod];
export interface ApiDestination {
  ApiDestinationArn?: string;
  Name?: string;
  ApiDestinationState?: ApiDestinationState | string;
  ConnectionArn?: string;
  InvocationEndpoint?: string;
  HttpMethod?: ApiDestinationHttpMethod | string;
  InvocationRateLimitPerSecond?: number;
  CreationTime?: Date;
  LastModifiedTime?: Date;
}
export declare const ArchiveState: {
  readonly CREATE_FAILED: "CREATE_FAILED";
  readonly CREATING: "CREATING";
  readonly DISABLED: "DISABLED";
  readonly ENABLED: "ENABLED";
  readonly UPDATE_FAILED: "UPDATE_FAILED";
  readonly UPDATING: "UPDATING";
};
export type ArchiveState = (typeof ArchiveState)[keyof typeof ArchiveState];
export interface Archive {
  ArchiveName?: string;
  EventSourceArn?: string;
  State?: ArchiveState | string;
  StateReason?: string;
  RetentionDays?: number;
  SizeBytes?: number;
  EventCount?: number;
  CreationTime?: Date;
}
export declare const AssignPublicIp: {
  readonly DISABLED: "DISABLED";
  readonly ENABLED: "ENABLED";
};
export type AssignPublicIp =
  (typeof AssignPublicIp)[keyof typeof AssignPublicIp];
export interface CancelReplayRequest {
  ReplayName: string | undefined;
}
export declare const ReplayState: {
  readonly CANCELLED: "CANCELLED";
  readonly CANCELLING: "CANCELLING";
  readonly COMPLETED: "COMPLETED";
  readonly FAILED: "FAILED";
  readonly RUNNING: "RUNNING";
  readonly STARTING: "STARTING";
};
export type ReplayState = (typeof ReplayState)[keyof typeof ReplayState];
export interface CancelReplayResponse {
  ReplayArn?: string;
  State?: ReplayState | string;
  StateReason?: string;
}
export declare class IllegalStatusException extends __BaseException {
  readonly name: "IllegalStatusException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<IllegalStatusException, __BaseException>
  );
}
export interface CreateApiDestinationRequest {
  Name: string | undefined;
  Description?: string;
  ConnectionArn: string | undefined;
  InvocationEndpoint: string | undefined;
  HttpMethod: ApiDestinationHttpMethod | string | undefined;
  InvocationRateLimitPerSecond?: number;
}
export interface CreateApiDestinationResponse {
  ApiDestinationArn?: string;
  ApiDestinationState?: ApiDestinationState | string;
  CreationTime?: Date;
  LastModifiedTime?: Date;
}
export declare class LimitExceededException extends __BaseException {
  readonly name: "LimitExceededException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<LimitExceededException, __BaseException>
  );
}
export declare class ResourceAlreadyExistsException extends __BaseException {
  readonly name: "ResourceAlreadyExistsException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ResourceAlreadyExistsException, __BaseException>
  );
}
export interface CreateArchiveRequest {
  ArchiveName: string | undefined;
  EventSourceArn: string | undefined;
  Description?: string;
  EventPattern?: string;
  RetentionDays?: number;
}
export interface CreateArchiveResponse {
  ArchiveArn?: string;
  State?: ArchiveState | string;
  StateReason?: string;
  CreationTime?: Date;
}
export declare class InvalidEventPatternException extends __BaseException {
  readonly name: "InvalidEventPatternException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<InvalidEventPatternException, __BaseException>
  );
}
export declare const ConnectionAuthorizationType: {
  readonly API_KEY: "API_KEY";
  readonly BASIC: "BASIC";
  readonly OAUTH_CLIENT_CREDENTIALS: "OAUTH_CLIENT_CREDENTIALS";
};
export type ConnectionAuthorizationType =
  (typeof ConnectionAuthorizationType)[keyof typeof ConnectionAuthorizationType];
export interface CreateConnectionApiKeyAuthRequestParameters {
  ApiKeyName: string | undefined;
  ApiKeyValue: string | undefined;
}
export interface CreateConnectionBasicAuthRequestParameters {
  Username: string | undefined;
  Password: string | undefined;
}
export interface ConnectionBodyParameter {
  Key?: string;
  Value?: string;
  IsValueSecret?: boolean;
}
export interface ConnectionHeaderParameter {
  Key?: string;
  Value?: string;
  IsValueSecret?: boolean;
}
export interface ConnectionQueryStringParameter {
  Key?: string;
  Value?: string;
  IsValueSecret?: boolean;
}
export interface ConnectionHttpParameters {
  HeaderParameters?: ConnectionHeaderParameter[];
  QueryStringParameters?: ConnectionQueryStringParameter[];
  BodyParameters?: ConnectionBodyParameter[];
}
export interface CreateConnectionOAuthClientRequestParameters {
  ClientID: string | undefined;
  ClientSecret: string | undefined;
}
export declare const ConnectionOAuthHttpMethod: {
  readonly GET: "GET";
  readonly POST: "POST";
  readonly PUT: "PUT";
};
export type ConnectionOAuthHttpMethod =
  (typeof ConnectionOAuthHttpMethod)[keyof typeof ConnectionOAuthHttpMethod];
export interface CreateConnectionOAuthRequestParameters {
  ClientParameters: CreateConnectionOAuthClientRequestParameters | undefined;
  AuthorizationEndpoint: string | undefined;
  HttpMethod: ConnectionOAuthHttpMethod | string | undefined;
  OAuthHttpParameters?: ConnectionHttpParameters;
}
export interface CreateConnectionAuthRequestParameters {
  BasicAuthParameters?: CreateConnectionBasicAuthRequestParameters;
  OAuthParameters?: CreateConnectionOAuthRequestParameters;
  ApiKeyAuthParameters?: CreateConnectionApiKeyAuthRequestParameters;
  InvocationHttpParameters?: ConnectionHttpParameters;
}
export interface CreateConnectionRequest {
  Name: string | undefined;
  Description?: string;
  AuthorizationType: ConnectionAuthorizationType | string | undefined;
  AuthParameters: CreateConnectionAuthRequestParameters | undefined;
}
export declare const ConnectionState: {
  readonly AUTHORIZED: "AUTHORIZED";
  readonly AUTHORIZING: "AUTHORIZING";
  readonly CREATING: "CREATING";
  readonly DEAUTHORIZED: "DEAUTHORIZED";
  readonly DEAUTHORIZING: "DEAUTHORIZING";
  readonly DELETING: "DELETING";
  readonly UPDATING: "UPDATING";
};
export type ConnectionState =
  (typeof ConnectionState)[keyof typeof ConnectionState];
export interface CreateConnectionResponse {
  ConnectionArn?: string;
  ConnectionState?: ConnectionState | string;
  CreationTime?: Date;
  LastModifiedTime?: Date;
}
export interface EndpointEventBus {
  EventBusArn: string | undefined;
}
export declare const ReplicationState: {
  readonly DISABLED: "DISABLED";
  readonly ENABLED: "ENABLED";
};
export type ReplicationState =
  (typeof ReplicationState)[keyof typeof ReplicationState];
export interface ReplicationConfig {
  State?: ReplicationState | string;
}
export interface Primary {
  HealthCheck: string | undefined;
}
export interface Secondary {
  Route: string | undefined;
}
export interface FailoverConfig {
  Primary: Primary | undefined;
  Secondary: Secondary | undefined;
}
export interface RoutingConfig {
  FailoverConfig: FailoverConfig | undefined;
}
export interface CreateEndpointRequest {
  Name: string | undefined;
  Description?: string;
  RoutingConfig: RoutingConfig | undefined;
  ReplicationConfig?: ReplicationConfig;
  EventBuses: EndpointEventBus[] | undefined;
  RoleArn?: string;
}
export declare const EndpointState: {
  readonly ACTIVE: "ACTIVE";
  readonly CREATE_FAILED: "CREATE_FAILED";
  readonly CREATING: "CREATING";
  readonly DELETE_FAILED: "DELETE_FAILED";
  readonly DELETING: "DELETING";
  readonly UPDATE_FAILED: "UPDATE_FAILED";
  readonly UPDATING: "UPDATING";
};
export type EndpointState = (typeof EndpointState)[keyof typeof EndpointState];
export interface CreateEndpointResponse {
  Name?: string;
  Arn?: string;
  RoutingConfig?: RoutingConfig;
  ReplicationConfig?: ReplicationConfig;
  EventBuses?: EndpointEventBus[];
  RoleArn?: string;
  State?: EndpointState | string;
}
export interface Tag {
  Key: string | undefined;
  Value: string | undefined;
}
export interface CreateEventBusRequest {
  Name: string | undefined;
  EventSourceName?: string;
  Tags?: Tag[];
}
export interface CreateEventBusResponse {
  EventBusArn?: string;
}
export interface CreatePartnerEventSourceRequest {
  Name: string | undefined;
  Account: string | undefined;
}
export interface CreatePartnerEventSourceResponse {
  EventSourceArn?: string;
}
export interface DeactivateEventSourceRequest {
  Name: string | undefined;
}
export interface DeauthorizeConnectionRequest {
  Name: string | undefined;
}
export interface DeauthorizeConnectionResponse {
  ConnectionArn?: string;
  ConnectionState?: ConnectionState | string;
  CreationTime?: Date;
  LastModifiedTime?: Date;
  LastAuthorizedTime?: Date;
}
export interface DeleteApiDestinationRequest {
  Name: string | undefined;
}
export interface DeleteApiDestinationResponse {}
export interface DeleteArchiveRequest {
  ArchiveName: string | undefined;
}
export interface DeleteArchiveResponse {}
export interface DeleteConnectionRequest {
  Name: string | undefined;
}
export interface DeleteConnectionResponse {
  ConnectionArn?: string;
  ConnectionState?: ConnectionState | string;
  CreationTime?: Date;
  LastModifiedTime?: Date;
  LastAuthorizedTime?: Date;
}
export interface DeleteEndpointRequest {
  Name: string | undefined;
}
export interface DeleteEndpointResponse {}
export interface DeleteEventBusRequest {
  Name: string | undefined;
}
export interface DeletePartnerEventSourceRequest {
  Name: string | undefined;
  Account: string | undefined;
}
export interface DeleteRuleRequest {
  Name: string | undefined;
  EventBusName?: string;
  Force?: boolean;
}
export declare class ManagedRuleException extends __BaseException {
  readonly name: "ManagedRuleException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ManagedRuleException, __BaseException>
  );
}
export interface DescribeApiDestinationRequest {
  Name: string | undefined;
}
export interface DescribeApiDestinationResponse {
  ApiDestinationArn?: string;
  Name?: string;
  Description?: string;
  ApiDestinationState?: ApiDestinationState | string;
  ConnectionArn?: string;
  InvocationEndpoint?: string;
  HttpMethod?: ApiDestinationHttpMethod | string;
  InvocationRateLimitPerSecond?: number;
  CreationTime?: Date;
  LastModifiedTime?: Date;
}
export interface DescribeArchiveRequest {
  ArchiveName: string | undefined;
}
export interface DescribeArchiveResponse {
  ArchiveArn?: string;
  ArchiveName?: string;
  EventSourceArn?: string;
  Description?: string;
  EventPattern?: string;
  State?: ArchiveState | string;
  StateReason?: string;
  RetentionDays?: number;
  SizeBytes?: number;
  EventCount?: number;
  CreationTime?: Date;
}
export interface DescribeConnectionRequest {
  Name: string | undefined;
}
export interface ConnectionApiKeyAuthResponseParameters {
  ApiKeyName?: string;
}
export interface ConnectionBasicAuthResponseParameters {
  Username?: string;
}
export interface ConnectionOAuthClientResponseParameters {
  ClientID?: string;
}
export interface ConnectionOAuthResponseParameters {
  ClientParameters?: ConnectionOAuthClientResponseParameters;
  AuthorizationEndpoint?: string;
  HttpMethod?: ConnectionOAuthHttpMethod | string;
  OAuthHttpParameters?: ConnectionHttpParameters;
}
export interface ConnectionAuthResponseParameters {
  BasicAuthParameters?: ConnectionBasicAuthResponseParameters;
  OAuthParameters?: ConnectionOAuthResponseParameters;
  ApiKeyAuthParameters?: ConnectionApiKeyAuthResponseParameters;
  InvocationHttpParameters?: ConnectionHttpParameters;
}
export interface DescribeConnectionResponse {
  ConnectionArn?: string;
  Name?: string;
  Description?: string;
  ConnectionState?: ConnectionState | string;
  StateReason?: string;
  AuthorizationType?: ConnectionAuthorizationType | string;
  SecretArn?: string;
  AuthParameters?: ConnectionAuthResponseParameters;
  CreationTime?: Date;
  LastModifiedTime?: Date;
  LastAuthorizedTime?: Date;
}
export interface DescribeEndpointRequest {
  Name: string | undefined;
  HomeRegion?: string;
}
export interface DescribeEndpointResponse {
  Name?: string;
  Description?: string;
  Arn?: string;
  RoutingConfig?: RoutingConfig;
  ReplicationConfig?: ReplicationConfig;
  EventBuses?: EndpointEventBus[];
  RoleArn?: string;
  EndpointId?: string;
  EndpointUrl?: string;
  State?: EndpointState | string;
  StateReason?: string;
  CreationTime?: Date;
  LastModifiedTime?: Date;
}
export interface DescribeEventBusRequest {
  Name?: string;
}
export interface DescribeEventBusResponse {
  Name?: string;
  Arn?: string;
  Policy?: string;
}
export interface DescribeEventSourceRequest {
  Name: string | undefined;
}
export declare const EventSourceState: {
  readonly ACTIVE: "ACTIVE";
  readonly DELETED: "DELETED";
  readonly PENDING: "PENDING";
};
export type EventSourceState =
  (typeof EventSourceState)[keyof typeof EventSourceState];
export interface DescribeEventSourceResponse {
  Arn?: string;
  CreatedBy?: string;
  CreationTime?: Date;
  ExpirationTime?: Date;
  Name?: string;
  State?: EventSourceState | string;
}
export interface DescribePartnerEventSourceRequest {
  Name: string | undefined;
}
export interface DescribePartnerEventSourceResponse {
  Arn?: string;
  Name?: string;
}
export interface DescribeReplayRequest {
  ReplayName: string | undefined;
}
export interface ReplayDestination {
  Arn: string | undefined;
  FilterArns?: string[];
}
export interface DescribeReplayResponse {
  ReplayName?: string;
  ReplayArn?: string;
  Description?: string;
  State?: ReplayState | string;
  StateReason?: string;
  EventSourceArn?: string;
  Destination?: ReplayDestination;
  EventStartTime?: Date;
  EventEndTime?: Date;
  EventLastReplayedTime?: Date;
  ReplayStartTime?: Date;
  ReplayEndTime?: Date;
}
export interface DescribeRuleRequest {
  Name: string | undefined;
  EventBusName?: string;
}
export declare const RuleState: {
  readonly DISABLED: "DISABLED";
  readonly ENABLED: "ENABLED";
};
export type RuleState = (typeof RuleState)[keyof typeof RuleState];
export interface DescribeRuleResponse {
  Name?: string;
  Arn?: string;
  EventPattern?: string;
  ScheduleExpression?: string;
  State?: RuleState | string;
  Description?: string;
  RoleArn?: string;
  ManagedBy?: string;
  EventBusName?: string;
  CreatedBy?: string;
}
export interface DisableRuleRequest {
  Name: string | undefined;
  EventBusName?: string;
}
export interface EnableRuleRequest {
  Name: string | undefined;
  EventBusName?: string;
}
export interface ListApiDestinationsRequest {
  NamePrefix?: string;
  ConnectionArn?: string;
  NextToken?: string;
  Limit?: number;
}
export interface ListApiDestinationsResponse {
  ApiDestinations?: ApiDestination[];
  NextToken?: string;
}
export interface ListArchivesRequest {
  NamePrefix?: string;
  EventSourceArn?: string;
  State?: ArchiveState | string;
  NextToken?: string;
  Limit?: number;
}
export interface ListArchivesResponse {
  Archives?: Archive[];
  NextToken?: string;
}
export interface ListConnectionsRequest {
  NamePrefix?: string;
  ConnectionState?: ConnectionState | string;
  NextToken?: string;
  Limit?: number;
}
export interface Connection {
  ConnectionArn?: string;
  Name?: string;
  ConnectionState?: ConnectionState | string;
  StateReason?: string;
  AuthorizationType?: ConnectionAuthorizationType | string;
  CreationTime?: Date;
  LastModifiedTime?: Date;
  LastAuthorizedTime?: Date;
}
export interface ListConnectionsResponse {
  Connections?: Connection[];
  NextToken?: string;
}
export interface ListEndpointsRequest {
  NamePrefix?: string;
  HomeRegion?: string;
  NextToken?: string;
  MaxResults?: number;
}
export interface Endpoint {
  Name?: string;
  Description?: string;
  Arn?: string;
  RoutingConfig?: RoutingConfig;
  ReplicationConfig?: ReplicationConfig;
  EventBuses?: EndpointEventBus[];
  RoleArn?: string;
  EndpointId?: string;
  EndpointUrl?: string;
  State?: EndpointState | string;
  StateReason?: string;
  CreationTime?: Date;
  LastModifiedTime?: Date;
}
export interface ListEndpointsResponse {
  Endpoints?: Endpoint[];
  NextToken?: string;
}
export interface ListEventBusesRequest {
  NamePrefix?: string;
  NextToken?: string;
  Limit?: number;
}
export interface EventBus {
  Name?: string;
  Arn?: string;
  Policy?: string;
}
export interface ListEventBusesResponse {
  EventBuses?: EventBus[];
  NextToken?: string;
}
export interface ListEventSourcesRequest {
  NamePrefix?: string;
  NextToken?: string;
  Limit?: number;
}
export interface EventSource {
  Arn?: string;
  CreatedBy?: string;
  CreationTime?: Date;
  ExpirationTime?: Date;
  Name?: string;
  State?: EventSourceState | string;
}
export interface ListEventSourcesResponse {
  EventSources?: EventSource[];
  NextToken?: string;
}
export interface ListPartnerEventSourceAccountsRequest {
  EventSourceName: string | undefined;
  NextToken?: string;
  Limit?: number;
}
export interface PartnerEventSourceAccount {
  Account?: string;
  CreationTime?: Date;
  ExpirationTime?: Date;
  State?: EventSourceState | string;
}
export interface ListPartnerEventSourceAccountsResponse {
  PartnerEventSourceAccounts?: PartnerEventSourceAccount[];
  NextToken?: string;
}
export interface ListPartnerEventSourcesRequest {
  NamePrefix: string | undefined;
  NextToken?: string;
  Limit?: number;
}
export interface PartnerEventSource {
  Arn?: string;
  Name?: string;
}
export interface ListPartnerEventSourcesResponse {
  PartnerEventSources?: PartnerEventSource[];
  NextToken?: string;
}
export interface ListReplaysRequest {
  NamePrefix?: string;
  State?: ReplayState | string;
  EventSourceArn?: string;
  NextToken?: string;
  Limit?: number;
}
export interface Replay {
  ReplayName?: string;
  EventSourceArn?: string;
  State?: ReplayState | string;
  StateReason?: string;
  EventStartTime?: Date;
  EventEndTime?: Date;
  EventLastReplayedTime?: Date;
  ReplayStartTime?: Date;
  ReplayEndTime?: Date;
}
export interface ListReplaysResponse {
  Replays?: Replay[];
  NextToken?: string;
}
export interface ListRuleNamesByTargetRequest {
  TargetArn: string | undefined;
  EventBusName?: string;
  NextToken?: string;
  Limit?: number;
}
export interface ListRuleNamesByTargetResponse {
  RuleNames?: string[];
  NextToken?: string;
}
export interface ListRulesRequest {
  NamePrefix?: string;
  EventBusName?: string;
  NextToken?: string;
  Limit?: number;
}
export interface Rule {
  Name?: string;
  Arn?: string;
  EventPattern?: string;
  State?: RuleState | string;
  Description?: string;
  ScheduleExpression?: string;
  RoleArn?: string;
  ManagedBy?: string;
  EventBusName?: string;
}
export interface ListRulesResponse {
  Rules?: Rule[];
  NextToken?: string;
}
export interface ListTagsForResourceRequest {
  ResourceARN: string | undefined;
}
export interface ListTagsForResourceResponse {
  Tags?: Tag[];
}
export interface ListTargetsByRuleRequest {
  Rule: string | undefined;
  EventBusName?: string;
  NextToken?: string;
  Limit?: number;
}
export interface BatchArrayProperties {
  Size?: number;
}
export interface BatchRetryStrategy {
  Attempts?: number;
}
export interface BatchParameters {
  JobDefinition: string | undefined;
  JobName: string | undefined;
  ArrayProperties?: BatchArrayProperties;
  RetryStrategy?: BatchRetryStrategy;
}
export interface DeadLetterConfig {
  Arn?: string;
}
export interface CapacityProviderStrategyItem {
  capacityProvider: string | undefined;
  weight?: number;
  base?: number;
}
export declare const LaunchType: {
  readonly EC2: "EC2";
  readonly EXTERNAL: "EXTERNAL";
  readonly FARGATE: "FARGATE";
};
export type LaunchType = (typeof LaunchType)[keyof typeof LaunchType];
export interface AwsVpcConfiguration {
  Subnets: string[] | undefined;
  SecurityGroups?: string[];
  AssignPublicIp?: AssignPublicIp | string;
}
export interface NetworkConfiguration {
  awsvpcConfiguration?: AwsVpcConfiguration;
}
export declare const PlacementConstraintType: {
  readonly DISTINCT_INSTANCE: "distinctInstance";
  readonly MEMBER_OF: "memberOf";
};
export type PlacementConstraintType =
  (typeof PlacementConstraintType)[keyof typeof PlacementConstraintType];
export interface PlacementConstraint {
  type?: PlacementConstraintType | string;
  expression?: string;
}
export declare const PlacementStrategyType: {
  readonly BINPACK: "binpack";
  readonly RANDOM: "random";
  readonly SPREAD: "spread";
};
export type PlacementStrategyType =
  (typeof PlacementStrategyType)[keyof typeof PlacementStrategyType];
export interface PlacementStrategy {
  type?: PlacementStrategyType | string;
  field?: string;
}
export declare const PropagateTags: {
  readonly TASK_DEFINITION: "TASK_DEFINITION";
};
export type PropagateTags = (typeof PropagateTags)[keyof typeof PropagateTags];
export interface EcsParameters {
  TaskDefinitionArn: string | undefined;
  TaskCount?: number;
  LaunchType?: LaunchType | string;
  NetworkConfiguration?: NetworkConfiguration;
  PlatformVersion?: string;
  Group?: string;
  CapacityProviderStrategy?: CapacityProviderStrategyItem[];
  EnableECSManagedTags?: boolean;
  EnableExecuteCommand?: boolean;
  PlacementConstraints?: PlacementConstraint[];
  PlacementStrategy?: PlacementStrategy[];
  PropagateTags?: PropagateTags | string;
  ReferenceId?: string;
  Tags?: Tag[];
}
export interface HttpParameters {
  PathParameterValues?: string[];
  HeaderParameters?: Record<string, string>;
  QueryStringParameters?: Record<string, string>;
}
export interface InputTransformer {
  InputPathsMap?: Record<string, string>;
  InputTemplate: string | undefined;
}
export interface KinesisParameters {
  PartitionKeyPath: string | undefined;
}
export interface RedshiftDataParameters {
  SecretManagerArn?: string;
  Database: string | undefined;
  DbUser?: string;
  Sql?: string;
  StatementName?: string;
  WithEvent?: boolean;
  Sqls?: string[];
}
export interface RetryPolicy {
  MaximumRetryAttempts?: number;
  MaximumEventAgeInSeconds?: number;
}
export interface RunCommandTarget {
  Key: string | undefined;
  Values: string[] | undefined;
}
export interface RunCommandParameters {
  RunCommandTargets: RunCommandTarget[] | undefined;
}
export interface SageMakerPipelineParameter {
  Name: string | undefined;
  Value: string | undefined;
}
export interface SageMakerPipelineParameters {
  PipelineParameterList?: SageMakerPipelineParameter[];
}
export interface SqsParameters {
  MessageGroupId?: string;
}
export interface Target {
  Id: string | undefined;
  Arn: string | undefined;
  RoleArn?: string;
  Input?: string;
  InputPath?: string;
  InputTransformer?: InputTransformer;
  KinesisParameters?: KinesisParameters;
  RunCommandParameters?: RunCommandParameters;
  EcsParameters?: EcsParameters;
  BatchParameters?: BatchParameters;
  SqsParameters?: SqsParameters;
  HttpParameters?: HttpParameters;
  RedshiftDataParameters?: RedshiftDataParameters;
  SageMakerPipelineParameters?: SageMakerPipelineParameters;
  DeadLetterConfig?: DeadLetterConfig;
  RetryPolicy?: RetryPolicy;
}
export interface ListTargetsByRuleResponse {
  Targets?: Target[];
  NextToken?: string;
}
export interface PutEventsRequestEntry {
  Time?: Date;
  Source?: string;
  Resources?: string[];
  DetailType?: string;
  Detail?: string;
  EventBusName?: string;
  TraceHeader?: string;
}
export interface PutEventsRequest {
  Entries: PutEventsRequestEntry[] | undefined;
  EndpointId?: string;
}
export interface PutEventsResultEntry {
  EventId?: string;
  ErrorCode?: string;
  ErrorMessage?: string;
}
export interface PutEventsResponse {
  FailedEntryCount?: number;
  Entries?: PutEventsResultEntry[];
}
export interface PutPartnerEventsRequestEntry {
  Time?: Date;
  Source?: string;
  Resources?: string[];
  DetailType?: string;
  Detail?: string;
}
export interface PutPartnerEventsRequest {
  Entries: PutPartnerEventsRequestEntry[] | undefined;
}
export interface PutPartnerEventsResultEntry {
  EventId?: string;
  ErrorCode?: string;
  ErrorMessage?: string;
}
export interface PutPartnerEventsResponse {
  FailedEntryCount?: number;
  Entries?: PutPartnerEventsResultEntry[];
}
export declare class PolicyLengthExceededException extends __BaseException {
  readonly name: "PolicyLengthExceededException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<PolicyLengthExceededException, __BaseException>
  );
}
export interface Condition {
  Type: string | undefined;
  Key: string | undefined;
  Value: string | undefined;
}
export interface PutPermissionRequest {
  EventBusName?: string;
  Action?: string;
  Principal?: string;
  StatementId?: string;
  Condition?: Condition;
  Policy?: string;
}
export interface PutRuleRequest {
  Name: string | undefined;
  ScheduleExpression?: string;
  EventPattern?: string;
  State?: RuleState | string;
  Description?: string;
  RoleArn?: string;
  Tags?: Tag[];
  EventBusName?: string;
}
export interface PutRuleResponse {
  RuleArn?: string;
}
export interface PutTargetsRequest {
  Rule: string | undefined;
  EventBusName?: string;
  Targets: Target[] | undefined;
}
export interface PutTargetsResultEntry {
  TargetId?: string;
  ErrorCode?: string;
  ErrorMessage?: string;
}
export interface PutTargetsResponse {
  FailedEntryCount?: number;
  FailedEntries?: PutTargetsResultEntry[];
}
export interface RemovePermissionRequest {
  StatementId?: string;
  RemoveAllPermissions?: boolean;
  EventBusName?: string;
}
export interface RemoveTargetsRequest {
  Rule: string | undefined;
  EventBusName?: string;
  Ids: string[] | undefined;
  Force?: boolean;
}
export interface RemoveTargetsResultEntry {
  TargetId?: string;
  ErrorCode?: string;
  ErrorMessage?: string;
}
export interface RemoveTargetsResponse {
  FailedEntryCount?: number;
  FailedEntries?: RemoveTargetsResultEntry[];
}
export interface StartReplayRequest {
  ReplayName: string | undefined;
  Description?: string;
  EventSourceArn: string | undefined;
  EventStartTime: Date | undefined;
  EventEndTime: Date | undefined;
  Destination: ReplayDestination | undefined;
}
export interface StartReplayResponse {
  ReplayArn?: string;
  State?: ReplayState | string;
  StateReason?: string;
  ReplayStartTime?: Date;
}
export interface TagResourceRequest {
  ResourceARN: string | undefined;
  Tags: Tag[] | undefined;
}
export interface TagResourceResponse {}
export interface TestEventPatternRequest {
  EventPattern: string | undefined;
  Event: string | undefined;
}
export interface TestEventPatternResponse {
  Result?: boolean;
}
export interface UntagResourceRequest {
  ResourceARN: string | undefined;
  TagKeys: string[] | undefined;
}
export interface UntagResourceResponse {}
export interface UpdateApiDestinationRequest {
  Name: string | undefined;
  Description?: string;
  ConnectionArn?: string;
  InvocationEndpoint?: string;
  HttpMethod?: ApiDestinationHttpMethod | string;
  InvocationRateLimitPerSecond?: number;
}
export interface UpdateApiDestinationResponse {
  ApiDestinationArn?: string;
  ApiDestinationState?: ApiDestinationState | string;
  CreationTime?: Date;
  LastModifiedTime?: Date;
}
export interface UpdateArchiveRequest {
  ArchiveName: string | undefined;
  Description?: string;
  EventPattern?: string;
  RetentionDays?: number;
}
export interface UpdateArchiveResponse {
  ArchiveArn?: string;
  State?: ArchiveState | string;
  StateReason?: string;
  CreationTime?: Date;
}
export interface UpdateConnectionApiKeyAuthRequestParameters {
  ApiKeyName?: string;
  ApiKeyValue?: string;
}
export interface UpdateConnectionBasicAuthRequestParameters {
  Username?: string;
  Password?: string;
}
export interface UpdateConnectionOAuthClientRequestParameters {
  ClientID?: string;
  ClientSecret?: string;
}
export interface UpdateConnectionOAuthRequestParameters {
  ClientParameters?: UpdateConnectionOAuthClientRequestParameters;
  AuthorizationEndpoint?: string;
  HttpMethod?: ConnectionOAuthHttpMethod | string;
  OAuthHttpParameters?: ConnectionHttpParameters;
}
export interface UpdateConnectionAuthRequestParameters {
  BasicAuthParameters?: UpdateConnectionBasicAuthRequestParameters;
  OAuthParameters?: UpdateConnectionOAuthRequestParameters;
  ApiKeyAuthParameters?: UpdateConnectionApiKeyAuthRequestParameters;
  InvocationHttpParameters?: ConnectionHttpParameters;
}
export interface UpdateConnectionRequest {
  Name: string | undefined;
  Description?: string;
  AuthorizationType?: ConnectionAuthorizationType | string;
  AuthParameters?: UpdateConnectionAuthRequestParameters;
}
export interface UpdateConnectionResponse {
  ConnectionArn?: string;
  ConnectionState?: ConnectionState | string;
  CreationTime?: Date;
  LastModifiedTime?: Date;
  LastAuthorizedTime?: Date;
}
export interface UpdateEndpointRequest {
  Name: string | undefined;
  Description?: string;
  RoutingConfig?: RoutingConfig;
  ReplicationConfig?: ReplicationConfig;
  EventBuses?: EndpointEventBus[];
  RoleArn?: string;
}
export interface UpdateEndpointResponse {
  Name?: string;
  Arn?: string;
  RoutingConfig?: RoutingConfig;
  ReplicationConfig?: ReplicationConfig;
  EventBuses?: EndpointEventBus[];
  RoleArn?: string;
  EndpointId?: string;
  EndpointUrl?: string;
  State?: EndpointState | string;
}
export declare const RedshiftDataParametersFilterSensitiveLog: (
  obj: RedshiftDataParameters
) => any;
export declare const TargetFilterSensitiveLog: (obj: Target) => any;
export declare const ListTargetsByRuleResponseFilterSensitiveLog: (
  obj: ListTargetsByRuleResponse
) => any;
export declare const PutTargetsRequestFilterSensitiveLog: (
  obj: PutTargetsRequest
) => any;
